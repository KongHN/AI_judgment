/***************** 
 * Untitled *
 *****************/


// store info about the experiment session:
let expName = 'untitled';  // from the Builder filename that created this script
let expInfo = {
    'participant': `${util.pad(Number.parseFloat(util.randint(0, 999999)).toFixed(0), 6)}`,
    'session': '001',
};

// Start code blocks for 'Before Experiment'
// init psychoJS:
const psychoJS = new PsychoJS({
  debug: true
});

// open window:
psychoJS.openWindow({
  fullscr: true,
  color: new util.Color([0,0,0]),
  units: 'height',
  waitBlanking: true,
  backgroundImage: '',
  backgroundFit: 'none',
});
// schedule the experiment:
psychoJS.schedule(psychoJS.gui.DlgFromDict({
  dictionary: expInfo,
  title: expName
}));

const flowScheduler = new Scheduler(psychoJS);
const dialogCancelScheduler = new Scheduler(psychoJS);
psychoJS.scheduleCondition(function() { return (psychoJS.gui.dialogComponent.button === 'OK'); },flowScheduler, dialogCancelScheduler);

// flowScheduler gets run if the participants presses OK
flowScheduler.add(updateInfo); // add timeStamp
flowScheduler.add(experimentInit);
flowScheduler.add(Exp_instructionRoutineBegin());
flowScheduler.add(Exp_instructionRoutineEachFrame());
flowScheduler.add(Exp_instructionRoutineEnd());
const trialsLoopScheduler = new Scheduler(psychoJS);
flowScheduler.add(trialsLoopBegin(trialsLoopScheduler));
flowScheduler.add(trialsLoopScheduler);
flowScheduler.add(trialsLoopEnd);




flowScheduler.add(Exp_endRoutineBegin());
flowScheduler.add(Exp_endRoutineEachFrame());
flowScheduler.add(Exp_endRoutineEnd());
flowScheduler.add(quitPsychoJS, 'Thank you for your patience.', true);

// quit if user presses Cancel in dialog box:
dialogCancelScheduler.add(quitPsychoJS, 'Thank you for your patience.', false);

psychoJS.start({
  expName: expName,
  expInfo: expInfo,
  resources: [
    // resources:
    {'name': 'images.xlsx', 'path': 'images.xlsx'},
    {'name': 'fake\fake (1).jpg', 'path': 'fake/fake (1).jpg'},
    {'name': 'fake\fake (2).jpg', 'path': 'fake/fake (2).jpg'},
    {'name': 'fake\fake (3).jpg', 'path': 'fake/fake (3).jpg'},
    {'name': 'fake\fake (4).jpg', 'path': 'fake/fake (4).jpg'},
    {'name': 'fake\fake (5).jpg', 'path': 'fake/fake (5).jpg'},
    {'name': 'real\real (1).jpg', 'path': 'real/real (1).jpg'},
    {'name': 'real\real (2).jpg', 'path': 'real/real (2).jpg'},
    {'name': 'real\real (3).jpg', 'path': 'real/real (3).jpg'},
    {'name': 'real\real (4).jpg', 'path': 'real/real (4).jpg'},
    {'name': 'real\real (5).jpg', 'path': 'real/real (5).jpg'},
    {'name': 'default.png', 'path': 'https://pavlovia.org/assets/default/default.png'},
  ]
});

psychoJS.experimentLogger.setLevel(core.Logger.ServerLevel.INFO);


var currentLoop;
var frameDur;
async function updateInfo() {
  currentLoop = psychoJS.experiment;  // right now there are no loops
  expInfo['date'] = util.MonotonicClock.getDateStr();  // add a simple timestamp
  expInfo['expName'] = expName;
  expInfo['psychopyVersion'] = '2024.2.4';
  expInfo['OS'] = window.navigator.platform;


  // store frame rate of monitor if we can measure it successfully
  expInfo['frameRate'] = psychoJS.window.getActualFrameRate();
  if (typeof expInfo['frameRate'] !== 'undefined')
    frameDur = 1.0 / Math.round(expInfo['frameRate']);
  else
    frameDur = 1.0 / 60.0; // couldn't get a reliable measure so guess

  // add info from the URL:
  util.addInfoFromUrl(expInfo);
  

  
  psychoJS.experiment.dataFileName = (("." + "/") + `data/${expInfo["participant"]}_${expName}_${expInfo["date"]}`);
  psychoJS.experiment.field_separator = '\t';


  return Scheduler.Event.NEXT;
}


var Exp_instructionClock;
var instruction;
var key_resp;
var Exp_pointClock;
var polygon;
var Exp_processClock;
var F_key;
var J_key;
var image;
var F_key_resp;
var J_key_resp;
var Exp_confClock;
var conf;
var rating;
var Exp_endClock;
var text;
var key_resp_2;
var globalClock;
var routineTimer;
async function experimentInit() {
  // Initialize components for Routine "Exp_instruction"
  Exp_instructionClock = new util.Clock();
  instruction = new visual.TextStim({
    win: psychoJS.window,
    name: 'instruction',
    text: 'In the following task, a fixation point will appear at the center of the screen. After the fixation point disappears, a picture will be shown. This picture may be generated by AI technology or it may be a real photographed image. First, please make a judgment. If you think it is generated by AI(fake), press the F key. If you think it is a real picture(real), please press the J key. After making the judgment, please rate your confidence in your judgment. From 1 to 4, 1 indicates very low confidence and 4 indicates very high confidence. Press any key to start.\n',
    font: 'Arial',
    units: undefined, 
    pos: [0, 0], draggable: false, height: 0.05,  wrapWidth: undefined, ori: 0.0,
    languageStyle: 'LTR',
    color: new util.Color('white'),  opacity: undefined,
    depth: 0.0 
  });
  
  key_resp = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true});
  
  // Initialize components for Routine "Exp_point"
  Exp_pointClock = new util.Clock();
  polygon = new visual.ShapeStim ({
    win: psychoJS.window, name: 'polygon', 
    vertices: 'cross', size:[0.2, 0.2],
    ori: 0.0, 
    pos: [0, 0], 
    draggable: false, 
    anchor: 'center', 
    lineWidth: 1.0, 
    lineColor: new util.Color('white'), 
    fillColor: new util.Color('white'), 
    colorSpace: 'rgb', 
    opacity: undefined, 
    depth: 0, 
    interpolate: true, 
  });
  
  // Initialize components for Routine "Exp_process"
  Exp_processClock = new util.Clock();
  F_key = new visual.TextStim({
    win: psychoJS.window,
    name: 'F_key',
    text: 'F: Fake',
    font: 'Arial',
    units: undefined, 
    pos: [(- 0.5), 0.4], draggable: false, height: 0.05,  wrapWidth: undefined, ori: 0.0,
    languageStyle: 'LTR',
    color: new util.Color('white'),  opacity: undefined,
    depth: 0.0 
  });
  
  J_key = new visual.TextStim({
    win: psychoJS.window,
    name: 'J_key',
    text: 'Real : J',
    font: 'Arial',
    units: undefined, 
    pos: [0.5, 0.4], draggable: false, height: 0.05,  wrapWidth: undefined, ori: 0.0,
    languageStyle: 'LTR',
    color: new util.Color('white'),  opacity: undefined,
    depth: -1.0 
  });
  
  image = new visual.ImageStim({
    win : psychoJS.window,
    name : 'image', units : undefined, 
    image : 'default.png', mask : undefined,
    anchor : 'center',
    ori : 0.0, 
    pos : [0, 0], 
    draggable: false,
    size : [0.5, 0.5],
    color : new util.Color([1,1,1]), opacity : undefined,
    flipHoriz : false, flipVert : false,
    texRes : 128.0, interpolate : true, depth : -2.0 
  });
  F_key_resp = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true});
  
  J_key_resp = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true});
  
  // Initialize components for Routine "Exp_conf"
  Exp_confClock = new util.Clock();
  conf = new visual.TextStim({
    win: psychoJS.window,
    name: 'conf',
    text: 'Please rate your confidence in the correctness of the judgment you just made.',
    font: 'Arial',
    units: undefined, 
    pos: [0, 0], draggable: false, height: 0.05,  wrapWidth: undefined, ori: 0.0,
    languageStyle: 'LTR',
    color: new util.Color('white'),  opacity: undefined,
    depth: 0.0 
  });
  
  rating = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true});
  
  // Initialize components for Routine "Exp_end"
  Exp_endClock = new util.Clock();
  text = new visual.TextStim({
    win: psychoJS.window,
    name: 'text',
    text: 'Thank you for participating in this experiment.',
    font: 'Arial',
    units: undefined, 
    pos: [0, 0], draggable: false, height: 0.05,  wrapWidth: undefined, ori: 0.0,
    languageStyle: 'LTR',
    color: new util.Color('white'),  opacity: undefined,
    depth: 0.0 
  });
  
  key_resp_2 = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true});
  
  // Create some handy timers
  globalClock = new util.Clock();  // to track the time since experiment started
  routineTimer = new util.CountdownTimer();  // to track time remaining of each (non-slip) routine
  
  return Scheduler.Event.NEXT;
}


var t;
var frameN;
var continueRoutine;
var Exp_instructionMaxDurationReached;
var _key_resp_allKeys;
var Exp_instructionMaxDuration;
var Exp_instructionComponents;
function Exp_instructionRoutineBegin(snapshot) {
  return async function () {
    TrialHandler.fromSnapshot(snapshot); // ensure that .thisN vals are up to date
    
    //--- Prepare to start Routine 'Exp_instruction' ---
    t = 0;
    frameN = -1;
    continueRoutine = true; // until we're told otherwise
    Exp_instructionClock.reset();
    routineTimer.reset();
    Exp_instructionMaxDurationReached = false;
    // update component parameters for each repeat
    key_resp.keys = undefined;
    key_resp.rt = undefined;
    _key_resp_allKeys = [];
    psychoJS.experiment.addData('Exp_instruction.started', globalClock.getTime());
    Exp_instructionMaxDuration = null
    // keep track of which components have finished
    Exp_instructionComponents = [];
    Exp_instructionComponents.push(instruction);
    Exp_instructionComponents.push(key_resp);
    
    Exp_instructionComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent)
        thisComponent.status = PsychoJS.Status.NOT_STARTED;
       });
    return Scheduler.Event.NEXT;
  }
}


function Exp_instructionRoutineEachFrame() {
  return async function () {
    //--- Loop for each frame of Routine 'Exp_instruction' ---
    // get current time
    t = Exp_instructionClock.getTime();
    frameN = frameN + 1;// number of completed frames (so 0 is the first frame)
    // update/draw components on each frame
    
    // *instruction* updates
    if (t >= 0.0 && instruction.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      instruction.tStart = t;  // (not accounting for frame time here)
      instruction.frameNStart = frameN;  // exact frame index
      
      instruction.setAutoDraw(true);
    }
    
    
    // *key_resp* updates
    if (t >= 0.0 && key_resp.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      key_resp.tStart = t;  // (not accounting for frame time here)
      key_resp.frameNStart = frameN;  // exact frame index
      
      // keyboard checking is just starting
      psychoJS.window.callOnFlip(function() { key_resp.clock.reset(); });  // t=0 on next screen flip
      psychoJS.window.callOnFlip(function() { key_resp.start(); }); // start on screen flip
      psychoJS.window.callOnFlip(function() { key_resp.clearEvents(); });
    }
    
    if (key_resp.status === PsychoJS.Status.STARTED) {
      let theseKeys = key_resp.getKeys({keyList: [], waitRelease: false});
      _key_resp_allKeys = _key_resp_allKeys.concat(theseKeys);
      if (_key_resp_allKeys.length > 0) {
        key_resp.keys = _key_resp_allKeys[_key_resp_allKeys.length - 1].name;  // just the last key pressed
        key_resp.rt = _key_resp_allKeys[_key_resp_allKeys.length - 1].rt;
        key_resp.duration = _key_resp_allKeys[_key_resp_allKeys.length - 1].duration;
        // a response ends the routine
        continueRoutine = false;
      }
    }
    
    // check for quit (typically the Esc key)
    if (psychoJS.experiment.experimentEnded || psychoJS.eventManager.getKeys({keyList:['escape']}).length > 0) {
      return quitPsychoJS('The [Escape] key was pressed. Goodbye!', false);
    }
    
    // check if the Routine should terminate
    if (!continueRoutine) {  // a component has requested a forced-end of Routine
      return Scheduler.Event.NEXT;
    }
    
    continueRoutine = false;  // reverts to True if at least one component still running
    Exp_instructionComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent && thisComponent.status !== PsychoJS.Status.FINISHED) {
        continueRoutine = true;
      }
    });
    
    // refresh the screen if continuing
    if (continueRoutine) {
      return Scheduler.Event.FLIP_REPEAT;
    } else {
      return Scheduler.Event.NEXT;
    }
  };
}


function Exp_instructionRoutineEnd(snapshot) {
  return async function () {
    //--- Ending Routine 'Exp_instruction' ---
    Exp_instructionComponents.forEach( function(thisComponent) {
      if (typeof thisComponent.setAutoDraw === 'function') {
        thisComponent.setAutoDraw(false);
      }
    });
    psychoJS.experiment.addData('Exp_instruction.stopped', globalClock.getTime());
    // update the trial handler
    if (currentLoop instanceof MultiStairHandler) {
      currentLoop.addResponse(key_resp.corr, level);
    }
    psychoJS.experiment.addData('key_resp.keys', key_resp.keys);
    if (typeof key_resp.keys !== 'undefined') {  // we had a response
        psychoJS.experiment.addData('key_resp.rt', key_resp.rt);
        psychoJS.experiment.addData('key_resp.duration', key_resp.duration);
        routineTimer.reset();
        }
    
    key_resp.stop();
    // the Routine "Exp_instruction" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset();
    
    // Routines running outside a loop should always advance the datafile row
    if (currentLoop === psychoJS.experiment) {
      psychoJS.experiment.nextEntry(snapshot);
    }
    return Scheduler.Event.NEXT;
  }
}


var trials;
function trialsLoopBegin(trialsLoopScheduler, snapshot) {
  return async function() {
    TrialHandler.fromSnapshot(snapshot); // update internal variables (.thisN etc) of the loop
    
    // set up handler to look after randomisation of conditions etc
    trials = new TrialHandler({
      psychoJS: psychoJS,
      nReps: 2, method: TrialHandler.Method.RANDOM,
      extraInfo: expInfo, originPath: undefined,
      trialList: 'images.xlsx',
      seed: undefined, name: 'trials'
    });
    psychoJS.experiment.addLoop(trials); // add the loop to the experiment
    currentLoop = trials;  // we're now the current loop
    
    // Schedule all the trials in the trialList:
    trials.forEach(function() {
      snapshot = trials.getSnapshot();
    
      trialsLoopScheduler.add(importConditions(snapshot));
      trialsLoopScheduler.add(Exp_pointRoutineBegin(snapshot));
      trialsLoopScheduler.add(Exp_pointRoutineEachFrame());
      trialsLoopScheduler.add(Exp_pointRoutineEnd(snapshot));
      trialsLoopScheduler.add(Exp_processRoutineBegin(snapshot));
      trialsLoopScheduler.add(Exp_processRoutineEachFrame());
      trialsLoopScheduler.add(Exp_processRoutineEnd(snapshot));
      trialsLoopScheduler.add(Exp_confRoutineBegin(snapshot));
      trialsLoopScheduler.add(Exp_confRoutineEachFrame());
      trialsLoopScheduler.add(Exp_confRoutineEnd(snapshot));
      trialsLoopScheduler.add(trialsLoopEndIteration(trialsLoopScheduler, snapshot));
    });
    
    return Scheduler.Event.NEXT;
  }
}


async function trialsLoopEnd() {
  // terminate loop
  psychoJS.experiment.removeLoop(trials);
  // update the current loop from the ExperimentHandler
  if (psychoJS.experiment._unfinishedLoops.length>0)
    currentLoop = psychoJS.experiment._unfinishedLoops.at(-1);
  else
    currentLoop = psychoJS.experiment;  // so we use addData from the experiment
  return Scheduler.Event.NEXT;
}


function trialsLoopEndIteration(scheduler, snapshot) {
  // ------Prepare for next entry------
  return async function () {
    if (typeof snapshot !== 'undefined') {
      // ------Check if user ended loop early------
      if (snapshot.finished) {
        // Check for and save orphaned data
        if (psychoJS.experiment.isEntryEmpty()) {
          psychoJS.experiment.nextEntry(snapshot);
        }
        scheduler.stop();
      } else {
        psychoJS.experiment.nextEntry(snapshot);
      }
    return Scheduler.Event.NEXT;
    }
  };
}


var Exp_pointMaxDurationReached;
var Exp_pointMaxDuration;
var Exp_pointComponents;
function Exp_pointRoutineBegin(snapshot) {
  return async function () {
    TrialHandler.fromSnapshot(snapshot); // ensure that .thisN vals are up to date
    
    //--- Prepare to start Routine 'Exp_point' ---
    t = 0;
    frameN = -1;
    continueRoutine = true; // until we're told otherwise
    Exp_pointClock.reset(routineTimer.getTime());
    routineTimer.add(0.300000);
    Exp_pointMaxDurationReached = false;
    // update component parameters for each repeat
    psychoJS.experiment.addData('Exp_point.started', globalClock.getTime());
    Exp_pointMaxDuration = null
    // keep track of which components have finished
    Exp_pointComponents = [];
    Exp_pointComponents.push(polygon);
    
    Exp_pointComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent)
        thisComponent.status = PsychoJS.Status.NOT_STARTED;
       });
    return Scheduler.Event.NEXT;
  }
}


var frameRemains;
function Exp_pointRoutineEachFrame() {
  return async function () {
    //--- Loop for each frame of Routine 'Exp_point' ---
    // get current time
    t = Exp_pointClock.getTime();
    frameN = frameN + 1;// number of completed frames (so 0 is the first frame)
    // update/draw components on each frame
    
    // *polygon* updates
    if (t >= 0.0 && polygon.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      polygon.tStart = t;  // (not accounting for frame time here)
      polygon.frameNStart = frameN;  // exact frame index
      
      polygon.setAutoDraw(true);
    }
    
    frameRemains = 0.0 + 0.3 - psychoJS.window.monitorFramePeriod * 0.75;// most of one frame period left
    if (polygon.status === PsychoJS.Status.STARTED && t >= frameRemains) {
      polygon.setAutoDraw(false);
    }
    
    // check for quit (typically the Esc key)
    if (psychoJS.experiment.experimentEnded || psychoJS.eventManager.getKeys({keyList:['escape']}).length > 0) {
      return quitPsychoJS('The [Escape] key was pressed. Goodbye!', false);
    }
    
    // check if the Routine should terminate
    if (!continueRoutine) {  // a component has requested a forced-end of Routine
      return Scheduler.Event.NEXT;
    }
    
    continueRoutine = false;  // reverts to True if at least one component still running
    Exp_pointComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent && thisComponent.status !== PsychoJS.Status.FINISHED) {
        continueRoutine = true;
      }
    });
    
    // refresh the screen if continuing
    if (continueRoutine && routineTimer.getTime() > 0) {
      return Scheduler.Event.FLIP_REPEAT;
    } else {
      return Scheduler.Event.NEXT;
    }
  };
}


function Exp_pointRoutineEnd(snapshot) {
  return async function () {
    //--- Ending Routine 'Exp_point' ---
    Exp_pointComponents.forEach( function(thisComponent) {
      if (typeof thisComponent.setAutoDraw === 'function') {
        thisComponent.setAutoDraw(false);
      }
    });
    psychoJS.experiment.addData('Exp_point.stopped', globalClock.getTime());
    if (Exp_pointMaxDurationReached) {
        Exp_pointClock.add(Exp_pointMaxDuration);
    } else {
        Exp_pointClock.add(0.300000);
    }
    // Routines running outside a loop should always advance the datafile row
    if (currentLoop === psychoJS.experiment) {
      psychoJS.experiment.nextEntry(snapshot);
    }
    return Scheduler.Event.NEXT;
  }
}


var Exp_processMaxDurationReached;
var _F_key_resp_allKeys;
var _J_key_resp_allKeys;
var Exp_processMaxDuration;
var Exp_processComponents;
function Exp_processRoutineBegin(snapshot) {
  return async function () {
    TrialHandler.fromSnapshot(snapshot); // ensure that .thisN vals are up to date
    
    //--- Prepare to start Routine 'Exp_process' ---
    t = 0;
    frameN = -1;
    continueRoutine = true; // until we're told otherwise
    Exp_processClock.reset();
    routineTimer.reset();
    Exp_processMaxDurationReached = false;
    // update component parameters for each repeat
    image.setImage(images);
    F_key_resp.keys = undefined;
    F_key_resp.rt = undefined;
    _F_key_resp_allKeys = [];
    J_key_resp.keys = undefined;
    J_key_resp.rt = undefined;
    _J_key_resp_allKeys = [];
    psychoJS.experiment.addData('Exp_process.started', globalClock.getTime());
    Exp_processMaxDuration = null
    // keep track of which components have finished
    Exp_processComponents = [];
    Exp_processComponents.push(F_key);
    Exp_processComponents.push(J_key);
    Exp_processComponents.push(image);
    Exp_processComponents.push(F_key_resp);
    Exp_processComponents.push(J_key_resp);
    
    Exp_processComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent)
        thisComponent.status = PsychoJS.Status.NOT_STARTED;
       });
    return Scheduler.Event.NEXT;
  }
}


function Exp_processRoutineEachFrame() {
  return async function () {
    //--- Loop for each frame of Routine 'Exp_process' ---
    // get current time
    t = Exp_processClock.getTime();
    frameN = frameN + 1;// number of completed frames (so 0 is the first frame)
    // update/draw components on each frame
    
    // *F_key* updates
    if (t >= 0.0 && F_key.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      F_key.tStart = t;  // (not accounting for frame time here)
      F_key.frameNStart = frameN;  // exact frame index
      
      F_key.setAutoDraw(true);
    }
    
    
    // *J_key* updates
    if (t >= 0.0 && J_key.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      J_key.tStart = t;  // (not accounting for frame time here)
      J_key.frameNStart = frameN;  // exact frame index
      
      J_key.setAutoDraw(true);
    }
    
    
    // *image* updates
    if (t >= 0.0 && image.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      image.tStart = t;  // (not accounting for frame time here)
      image.frameNStart = frameN;  // exact frame index
      
      image.setAutoDraw(true);
    }
    
    
    // *F_key_resp* updates
    if (t >= 0.0 && F_key_resp.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      F_key_resp.tStart = t;  // (not accounting for frame time here)
      F_key_resp.frameNStart = frameN;  // exact frame index
      
      // keyboard checking is just starting
      F_key_resp.clock.reset();
      F_key_resp.start();
    }
    
    if (F_key_resp.status === PsychoJS.Status.STARTED) {
      let theseKeys = F_key_resp.getKeys({keyList: ['f'], waitRelease: false});
      _F_key_resp_allKeys = _F_key_resp_allKeys.concat(theseKeys);
      if (_F_key_resp_allKeys.length > 0) {
        F_key_resp.keys = _F_key_resp_allKeys[_F_key_resp_allKeys.length - 1].name;  // just the last key pressed
        F_key_resp.rt = _F_key_resp_allKeys[_F_key_resp_allKeys.length - 1].rt;
        F_key_resp.duration = _F_key_resp_allKeys[_F_key_resp_allKeys.length - 1].duration;
        // was this correct?
        if (F_key_resp.keys == judge) {
            F_key_resp.corr = 1;
        } else {
            F_key_resp.corr = 0;
        }
        // a response ends the routine
        continueRoutine = false;
      }
    }
    
    
    // *J_key_resp* updates
    if (t >= 0.0 && J_key_resp.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      J_key_resp.tStart = t;  // (not accounting for frame time here)
      J_key_resp.frameNStart = frameN;  // exact frame index
      
      // keyboard checking is just starting
      J_key_resp.clock.reset();
      J_key_resp.start();
    }
    
    if (J_key_resp.status === PsychoJS.Status.STARTED) {
      let theseKeys = J_key_resp.getKeys({keyList: ['j'], waitRelease: false});
      _J_key_resp_allKeys = _J_key_resp_allKeys.concat(theseKeys);
      if (_J_key_resp_allKeys.length > 0) {
        J_key_resp.keys = _J_key_resp_allKeys[_J_key_resp_allKeys.length - 1].name;  // just the last key pressed
        J_key_resp.rt = _J_key_resp_allKeys[_J_key_resp_allKeys.length - 1].rt;
        J_key_resp.duration = _J_key_resp_allKeys[_J_key_resp_allKeys.length - 1].duration;
        // was this correct?
        if (J_key_resp.keys == judge) {
            J_key_resp.corr = 1;
        } else {
            J_key_resp.corr = 0;
        }
        // a response ends the routine
        continueRoutine = false;
      }
    }
    
    // check for quit (typically the Esc key)
    if (psychoJS.experiment.experimentEnded || psychoJS.eventManager.getKeys({keyList:['escape']}).length > 0) {
      return quitPsychoJS('The [Escape] key was pressed. Goodbye!', false);
    }
    
    // check if the Routine should terminate
    if (!continueRoutine) {  // a component has requested a forced-end of Routine
      return Scheduler.Event.NEXT;
    }
    
    continueRoutine = false;  // reverts to True if at least one component still running
    Exp_processComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent && thisComponent.status !== PsychoJS.Status.FINISHED) {
        continueRoutine = true;
      }
    });
    
    // refresh the screen if continuing
    if (continueRoutine) {
      return Scheduler.Event.FLIP_REPEAT;
    } else {
      return Scheduler.Event.NEXT;
    }
  };
}


function Exp_processRoutineEnd(snapshot) {
  return async function () {
    //--- Ending Routine 'Exp_process' ---
    Exp_processComponents.forEach( function(thisComponent) {
      if (typeof thisComponent.setAutoDraw === 'function') {
        thisComponent.setAutoDraw(false);
      }
    });
    psychoJS.experiment.addData('Exp_process.stopped', globalClock.getTime());
    // was no response the correct answer?!
    if (F_key_resp.keys === undefined) {
      if (['None','none',undefined].includes(judge)) {
         F_key_resp.corr = 1;  // correct non-response
      } else {
         F_key_resp.corr = 0;  // failed to respond (incorrectly)
      }
    }
    // store data for current loop
    // update the trial handler
    if (currentLoop instanceof MultiStairHandler) {
      currentLoop.addResponse(F_key_resp.corr, level);
    }
    psychoJS.experiment.addData('F_key_resp.keys', F_key_resp.keys);
    psychoJS.experiment.addData('F_key_resp.corr', F_key_resp.corr);
    if (typeof F_key_resp.keys !== 'undefined') {  // we had a response
        psychoJS.experiment.addData('F_key_resp.rt', F_key_resp.rt);
        psychoJS.experiment.addData('F_key_resp.duration', F_key_resp.duration);
        routineTimer.reset();
        }
    
    F_key_resp.stop();
    // was no response the correct answer?!
    if (J_key_resp.keys === undefined) {
      if (['None','none',undefined].includes(judge)) {
         J_key_resp.corr = 1;  // correct non-response
      } else {
         J_key_resp.corr = 0;  // failed to respond (incorrectly)
      }
    }
    // store data for current loop
    // update the trial handler
    if (currentLoop instanceof MultiStairHandler) {
      currentLoop.addResponse(J_key_resp.corr, level);
    }
    psychoJS.experiment.addData('J_key_resp.keys', J_key_resp.keys);
    psychoJS.experiment.addData('J_key_resp.corr', J_key_resp.corr);
    if (typeof J_key_resp.keys !== 'undefined') {  // we had a response
        psychoJS.experiment.addData('J_key_resp.rt', J_key_resp.rt);
        psychoJS.experiment.addData('J_key_resp.duration', J_key_resp.duration);
        routineTimer.reset();
        }
    
    J_key_resp.stop();
    // the Routine "Exp_process" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset();
    
    // Routines running outside a loop should always advance the datafile row
    if (currentLoop === psychoJS.experiment) {
      psychoJS.experiment.nextEntry(snapshot);
    }
    return Scheduler.Event.NEXT;
  }
}


var Exp_confMaxDurationReached;
var _rating_allKeys;
var Exp_confMaxDuration;
var Exp_confComponents;
function Exp_confRoutineBegin(snapshot) {
  return async function () {
    TrialHandler.fromSnapshot(snapshot); // ensure that .thisN vals are up to date
    
    //--- Prepare to start Routine 'Exp_conf' ---
    t = 0;
    frameN = -1;
    continueRoutine = true; // until we're told otherwise
    Exp_confClock.reset();
    routineTimer.reset();
    Exp_confMaxDurationReached = false;
    // update component parameters for each repeat
    rating.keys = undefined;
    rating.rt = undefined;
    _rating_allKeys = [];
    psychoJS.experiment.addData('Exp_conf.started', globalClock.getTime());
    Exp_confMaxDuration = null
    // keep track of which components have finished
    Exp_confComponents = [];
    Exp_confComponents.push(conf);
    Exp_confComponents.push(rating);
    
    Exp_confComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent)
        thisComponent.status = PsychoJS.Status.NOT_STARTED;
       });
    return Scheduler.Event.NEXT;
  }
}


function Exp_confRoutineEachFrame() {
  return async function () {
    //--- Loop for each frame of Routine 'Exp_conf' ---
    // get current time
    t = Exp_confClock.getTime();
    frameN = frameN + 1;// number of completed frames (so 0 is the first frame)
    // update/draw components on each frame
    
    // *conf* updates
    if (t >= 0.0 && conf.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      conf.tStart = t;  // (not accounting for frame time here)
      conf.frameNStart = frameN;  // exact frame index
      
      conf.setAutoDraw(true);
    }
    
    
    // *rating* updates
    if (t >= 0.0 && rating.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      rating.tStart = t;  // (not accounting for frame time here)
      rating.frameNStart = frameN;  // exact frame index
      
      // keyboard checking is just starting
      rating.clock.reset();
      rating.start();
    }
    
    if (rating.status === PsychoJS.Status.STARTED) {
      let theseKeys = rating.getKeys({keyList: ['1', '2', '3', '4', '5'], waitRelease: false});
      _rating_allKeys = _rating_allKeys.concat(theseKeys);
      if (_rating_allKeys.length > 0) {
        rating.keys = _rating_allKeys[_rating_allKeys.length - 1].name;  // just the last key pressed
        rating.rt = _rating_allKeys[_rating_allKeys.length - 1].rt;
        rating.duration = _rating_allKeys[_rating_allKeys.length - 1].duration;
        // a response ends the routine
        continueRoutine = false;
      }
    }
    
    // check for quit (typically the Esc key)
    if (psychoJS.experiment.experimentEnded || psychoJS.eventManager.getKeys({keyList:['escape']}).length > 0) {
      return quitPsychoJS('The [Escape] key was pressed. Goodbye!', false);
    }
    
    // check if the Routine should terminate
    if (!continueRoutine) {  // a component has requested a forced-end of Routine
      return Scheduler.Event.NEXT;
    }
    
    continueRoutine = false;  // reverts to True if at least one component still running
    Exp_confComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent && thisComponent.status !== PsychoJS.Status.FINISHED) {
        continueRoutine = true;
      }
    });
    
    // refresh the screen if continuing
    if (continueRoutine) {
      return Scheduler.Event.FLIP_REPEAT;
    } else {
      return Scheduler.Event.NEXT;
    }
  };
}


function Exp_confRoutineEnd(snapshot) {
  return async function () {
    //--- Ending Routine 'Exp_conf' ---
    Exp_confComponents.forEach( function(thisComponent) {
      if (typeof thisComponent.setAutoDraw === 'function') {
        thisComponent.setAutoDraw(false);
      }
    });
    psychoJS.experiment.addData('Exp_conf.stopped', globalClock.getTime());
    // update the trial handler
    if (currentLoop instanceof MultiStairHandler) {
      currentLoop.addResponse(rating.corr, level);
    }
    psychoJS.experiment.addData('rating.keys', rating.keys);
    if (typeof rating.keys !== 'undefined') {  // we had a response
        psychoJS.experiment.addData('rating.rt', rating.rt);
        psychoJS.experiment.addData('rating.duration', rating.duration);
        routineTimer.reset();
        }
    
    rating.stop();
    // the Routine "Exp_conf" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset();
    
    // Routines running outside a loop should always advance the datafile row
    if (currentLoop === psychoJS.experiment) {
      psychoJS.experiment.nextEntry(snapshot);
    }
    return Scheduler.Event.NEXT;
  }
}


var Exp_endMaxDurationReached;
var _key_resp_2_allKeys;
var Exp_endMaxDuration;
var Exp_endComponents;
function Exp_endRoutineBegin(snapshot) {
  return async function () {
    TrialHandler.fromSnapshot(snapshot); // ensure that .thisN vals are up to date
    
    //--- Prepare to start Routine 'Exp_end' ---
    t = 0;
    frameN = -1;
    continueRoutine = true; // until we're told otherwise
    Exp_endClock.reset();
    routineTimer.reset();
    Exp_endMaxDurationReached = false;
    // update component parameters for each repeat
    key_resp_2.keys = undefined;
    key_resp_2.rt = undefined;
    _key_resp_2_allKeys = [];
    psychoJS.experiment.addData('Exp_end.started', globalClock.getTime());
    Exp_endMaxDuration = null
    // keep track of which components have finished
    Exp_endComponents = [];
    Exp_endComponents.push(text);
    Exp_endComponents.push(key_resp_2);
    
    Exp_endComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent)
        thisComponent.status = PsychoJS.Status.NOT_STARTED;
       });
    return Scheduler.Event.NEXT;
  }
}


function Exp_endRoutineEachFrame() {
  return async function () {
    //--- Loop for each frame of Routine 'Exp_end' ---
    // get current time
    t = Exp_endClock.getTime();
    frameN = frameN + 1;// number of completed frames (so 0 is the first frame)
    // update/draw components on each frame
    
    // *text* updates
    if (t >= 0.0 && text.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      text.tStart = t;  // (not accounting for frame time here)
      text.frameNStart = frameN;  // exact frame index
      
      text.setAutoDraw(true);
    }
    
    
    // *key_resp_2* updates
    if (t >= 0.0 && key_resp_2.status === PsychoJS.Status.NOT_STARTED) {
      // keep track of start time/frame for later
      key_resp_2.tStart = t;  // (not accounting for frame time here)
      key_resp_2.frameNStart = frameN;  // exact frame index
      
      // keyboard checking is just starting
      key_resp_2.clock.reset();
      key_resp_2.start();
    }
    
    if (key_resp_2.status === PsychoJS.Status.STARTED) {
      let theseKeys = key_resp_2.getKeys({keyList: [], waitRelease: false});
      _key_resp_2_allKeys = _key_resp_2_allKeys.concat(theseKeys);
      if (_key_resp_2_allKeys.length > 0) {
        key_resp_2.keys = _key_resp_2_allKeys[_key_resp_2_allKeys.length - 1].name;  // just the last key pressed
        key_resp_2.rt = _key_resp_2_allKeys[_key_resp_2_allKeys.length - 1].rt;
        key_resp_2.duration = _key_resp_2_allKeys[_key_resp_2_allKeys.length - 1].duration;
        // a response ends the routine
        continueRoutine = false;
      }
    }
    
    // check for quit (typically the Esc key)
    if (psychoJS.experiment.experimentEnded || psychoJS.eventManager.getKeys({keyList:['escape']}).length > 0) {
      return quitPsychoJS('The [Escape] key was pressed. Goodbye!', false);
    }
    
    // check if the Routine should terminate
    if (!continueRoutine) {  // a component has requested a forced-end of Routine
      return Scheduler.Event.NEXT;
    }
    
    continueRoutine = false;  // reverts to True if at least one component still running
    Exp_endComponents.forEach( function(thisComponent) {
      if ('status' in thisComponent && thisComponent.status !== PsychoJS.Status.FINISHED) {
        continueRoutine = true;
      }
    });
    
    // refresh the screen if continuing
    if (continueRoutine) {
      return Scheduler.Event.FLIP_REPEAT;
    } else {
      return Scheduler.Event.NEXT;
    }
  };
}


function Exp_endRoutineEnd(snapshot) {
  return async function () {
    //--- Ending Routine 'Exp_end' ---
    Exp_endComponents.forEach( function(thisComponent) {
      if (typeof thisComponent.setAutoDraw === 'function') {
        thisComponent.setAutoDraw(false);
      }
    });
    psychoJS.experiment.addData('Exp_end.stopped', globalClock.getTime());
    // update the trial handler
    if (currentLoop instanceof MultiStairHandler) {
      currentLoop.addResponse(key_resp_2.corr, level);
    }
    psychoJS.experiment.addData('key_resp_2.keys', key_resp_2.keys);
    if (typeof key_resp_2.keys !== 'undefined') {  // we had a response
        psychoJS.experiment.addData('key_resp_2.rt', key_resp_2.rt);
        psychoJS.experiment.addData('key_resp_2.duration', key_resp_2.duration);
        routineTimer.reset();
        }
    
    key_resp_2.stop();
    // the Routine "Exp_end" was not non-slip safe, so reset the non-slip timer
    routineTimer.reset();
    
    // Routines running outside a loop should always advance the datafile row
    if (currentLoop === psychoJS.experiment) {
      psychoJS.experiment.nextEntry(snapshot);
    }
    return Scheduler.Event.NEXT;
  }
}


function importConditions(currentLoop) {
  return async function () {
    psychoJS.importAttributes(currentLoop.getCurrentTrial());
    return Scheduler.Event.NEXT;
    };
}


async function quitPsychoJS(message, isCompleted) {
  // Check for and save orphaned data
  if (psychoJS.experiment.isEntryEmpty()) {
    psychoJS.experiment.nextEntry();
  }
  psychoJS.window.close();
  psychoJS.quit({message: message, isCompleted: isCompleted});
  
  return Scheduler.Event.QUIT;
}
